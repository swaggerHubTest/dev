/*
 * Swagger Petstore
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PetsApiController : ControllerBase
    { 
        /// <summary>
        /// Create a pet
        /// </summary>
        /// <response code="201">Null response</response>
        /// <response code="0">unexpected error</response>
        [HttpPost]
        [Route("/v1/pets")]
        [ValidateModelState]
        [SwaggerOperation("CreatePets")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult CreatePets()
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// List all pets
        /// </summary>
        /// <param name="limit">How many items to return at one time (max 100)</param>
        /// <response code="200">A paged array of pets</response>
        /// <response code="0">unexpected error</response>
        [HttpGet]
        [Route("/v1/pets")]
        [ValidateModelState]
        [SwaggerOperation("ListPets")]
        [SwaggerResponse(statusCode: 200, type: typeof(Pets), description: "A paged array of pets")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ListPets([FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Pets));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"tag\" : \"tag\"\n}, {\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"tag\" : \"tag\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Pets>(exampleJson)
                        : default(Pets);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Info for a specific pet
        /// </summary>
        /// <param name="petId">The id of the pet to retrieve</param>
        /// <response code="200">Expected response to a valid request</response>
        /// <response code="0">unexpected error</response>
        [HttpGet]
        [Route("/v1/pets/{petId}")]
        [ValidateModelState]
        [SwaggerOperation("ShowPetById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Pet), description: "Expected response to a valid request")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "unexpected error")]
        public virtual IActionResult ShowPetById([FromRoute][Required]string petId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Pet));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"tag\" : \"tag\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Pet>(exampleJson)
                        : default(Pet);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
